package com.dw.common.base;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.transform.Transformers;
import org.hibernate.jdbc.Work;

public class TempJdbcDao extends BaseDAOHibernate{
	public List querylist(String sql){
		Session session=getCurrentSession();
		Query q=session.createSQLQuery(sql);
		q.setResultTransformer(CriteriaSpecification.ALIAS_TO_ENTITY_MAP);
		return   q.list();
	}
	/**
     * 获取表中所有字段名称
     * @param tableName 表名
     * @return
     */
    public List<String> getColumnNames(String sql) {
        List<String> columnNames = new ArrayList<>();
        //与数据库的连接
        Session session=getCurrentSession();
        try {
			session.beginTransaction();
			session.doWork(new Work(){

				@Override
				public void execute(Connection conn) throws SQLException {
					PreparedStatement ps = conn.prepareStatement( sql );
			        ResultSet rs = ps.executeQuery();
			        try {
			            ResultSetMetaData metadata = rs.getMetaData();
			            int size = metadata.getColumnCount();
			            for (int i = 0; i < size; i++) {
			                columnNames.add(metadata.getColumnName(i + 1));
			            }
			        }
			        finally {
			            doClose(null,ps,rs);
			        }
				}
				
			});
			session.getTransaction().commit();
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			this.doClose(session, null, null);
			return columnNames;
		}
    }
    protected void doClose(Session session, Statement stmt, ResultSet rs){
        if(rs != null){
            try {
                rs.close();
                rs=null;
            } catch (Exception ex) {
                rs=null;
//                log.error(ex,ex);
                ex.printStackTrace();
            }
        }
        // Statement对象关闭时,会自动释放其管理的一个ResultSet对象
        if(stmt != null){
            try {
                stmt.close();
                stmt=null;
            } catch (Exception ex) {
                stmt=null;
//                log.error(ex,ex);
                ex.printStackTrace();
            }
        }
//      当Hibernate的事务由Spring接管时,session的关闭由Spring管理.不用手动关闭
//      if(session != null){
//          session.close();
//      }
    }
}
