package com.dw.web;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.support.PropertiesLoaderUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.dw.common.AdminSession;
import com.dw.common.FiledProcFilter;
import com.dw.common.LogFilter;
import com.dw.interceptor.MySessionContext;
import com.dw.model.ResultMessage;
import com.dw.servce.ILogService;
import com.dw.servce.IReportService;
import com.dw.servce.IUserService;
import com.dw.util.HttpRequest;
import com.dw.util.exportReportTemplete;
import com.google.gson.Gson;

@Controller
public class Report2Constroller {
	@Autowired
	IUserService adminService;
	@Autowired
	IReportService resSer;
	@Autowired
	ILogService loginService;

	/**
	 * 进行对空值率的数据做出统计
	 * 
	 * @param reportEN
	 * @param request
	 * @param response
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@ResponseBody
	@RequestMapping(method = RequestMethod.GET, value = "/getReportDirect", produces = "text/html;charset=UTF-8", params = "fieldNameEN")
	public void getRportByAddressMappingDirect(HttpServletRequest request, HttpServletResponse response,
			@RequestParam("fieldVal") String fieldVal, @RequestParam("fieldNameEN") String fieldNameEN) {
		// 判断接口是否注册
		String requestUrl = request.getContextPath() + request.getServletPath();
		ResultMessage result = new ResultMessage();
		Gson json = new Gson();
		// 在外嵌的时候进行判断 是否有权限
		if (null != request.getParameter("iframe") && Boolean.parseBoolean(request.getParameter("iframe").toString())
				&& !isIframeCook(request)) {
			PrintWriter out1 = null;
			try {
				out1 = response.getWriter();
			} catch (IOException e) {
				e.printStackTrace();
			}
			Map maplist = new HashMap();
			maplist.put("code", 0);
			maplist.put("msg", "没有通过访问权限");
			String jsonstr = json.toJson(maplist);
			out1.print(jsonstr);
			return;
		}

		MySessionContext context = MySessionContext.getInstance();
		if (context.getInvalidated(request)) {
			PrintWriter out1 = null;
			try {
				out1 = response.getWriter();
			} catch (IOException e) {
				e.printStackTrace();
			}
			Map maplist = new HashMap();
			maplist.put("code", 0);
			maplist.put("msg", "用户登录超时");
			String jsonstr = json.toJson(maplist);
			out1.print(jsonstr);
			return;
		}

		if (null == request.getParameter("iframe") && !checkInterFaceExist(requestUrl, request)) {
			result.setCode("2");
			result.setMsg("存在非法访问，操作已禁止");
			try {
				PrintWriter out = response.getWriter();
				out.print(json.toJson(result));
			} catch (IOException e) {
				e.printStackTrace();
			}
		} else {
			// 获取稽核报表基本信息
			Map<String, String> requestUrlmap = new HashMap<String, String>();// 用于存在全部的接口
			FiledProcFilter instance = FiledProcFilter.getInstance();
			instance.setAllpv(false);
			String[] nameStr = null;// fileName 的List
			String[] fvalStr = null;// fileVal 的List
			String fileName = null;
			if (null != fieldNameEN && null != fieldVal) {
				nameStr = fieldNameEN.replaceAll("'", "").split(",");
				fvalStr = fieldVal.replaceAll("'", "").split(",");
			}
			// 判断该key下的值该角色是否有权限
			for (int i = 0; i < nameStr.length; i++) {
				if ("prov_id".equals(nameStr[i]) && "pvct".equals(fvalStr[i])) {// 当传的全部的时候为空编码

				} else {
					requestUrlmap.put(nameStr[i], fvalStr[i]);
				}
				if ("kpi_id".equals(nameStr[i]))
					instance.setKpi_id(fvalStr[i]);
				if (instance.getBl().contains(nameStr[i])) {// 在白名单之中
					continue;
				} else {
					String keyValue = fvalStr[i];
					if (null != keyValue && !checkJurExist(keyValue, request)) {
						result.setCode("2");
						result.setMsg("字段非法访问，操作已禁止");
						break;
					}
				}
			}
			instance.setRequestUrlmap(requestUrlmap);
			List<Map<String, String>> pv = resSer.getProvCodeName();
			List<Map<String, String>> ct = resSer.getCityCodeName();
			instance.setPv(pv);
			instance.setCt(ct);

			if (!"2".equals(result.getCode())) {
				String cb = request.getParameter("audit");
				if (cb != null) {
					response.setContentType("text/javascript");
				} else {
					response.setContentType("application/x-json");
				}

				PrintWriter out = null;
				try {
					out = response.getWriter();
					// 如果该需求为特定需求 那么typechart =1 typechart：1 分省 2全国 3其他
					String typechart = request.getParameter("typechart");
					if (typechart != null && "1".equals(typechart)) {// 这个是进行留下的接口
					}
					try {
						List<Map<String, String>> directFiledMapping = resSer.getDirectFiledMapping(requestUrlmap);

						instance.setDirectFiledName(directFiledMapping);

						List<Map<String, String>> reportDataBySql = resSer
								.getReportDataBySql(instance.getNUllALLPVSQL());
						if (reportDataBySql.size() == 1) {
							List<String> c = new ArrayList<String>();
							c.add("all");
							c.add("allpv");
							if (c.contains(reportDataBySql.get(0).get(instance.getpr()))) {
								instance.setAllpv(true);
								System.out.println("这个查询只有全国的数据! ");
							}
						}
						if (directFiledMapping.size() == 0) {
							result.setCode("2");
							result.setMsg("数据库源表中没有信息,请完善 并且库表对应的字段key 为: tableName !");
						}
					} catch (Exception e) {
						result.setCode("2");
						result.setMsg("查询字段的sql出现异常,请处理 !");
						e.printStackTrace();
					}

					if (!"2".equals(result.getCode())) {
						List<Map<String, String>> repData = null;
						String sql = instance.getNullsql();
						System.out.println(sql);
						repData = resSer.getReportDataBySql(instance.getCountSql(sql));
						String rows = (repData.get(0).get("rows") + "");
						repData = new ArrayList<Map<String, String>>();
						String pageNo = request.getParameter("pageNo");
						String pageSize = request.getParameter("pageSize");
						String order = request.getParameter("order");
						if (null != order && !"".equals(order) && !"null".equals(order)) {
							sql += " " + order + " ";
						}
						if (pageNo != null && !"".equals(pageNo) && !"null".equals(pageNo) && pageSize != null
								&& !"".equals(pageSize) && !"null".equals(pageSize)) {
							repData = resSer.getReportDataBySql(instance.getPageSql(sql, pageNo, pageSize));
						} else {
							repData = resSer.getReportDataBySql(sql);
						}
						// 获取报表表头信息
						List<Map<String, String>> repHead = instance.getNUllTableHead();
						if ("9".equals(typechart)) {// 进行查询head
							Map maplist = new HashMap();
							maplist.put("code", "1");
							maplist.put("rows", rows);
							maplist.put("msg", "查询成功");
							maplist.put("Head", repHead);
							String jsonstr = json.toJson(maplist);
							out.print(jsonstr);

						} else {
							fileName = request.getParameter("fileName") + "";
							Map maplist = new HashMap();
							if (null != fileName && !"".equals(fileName) && !"null".equals(fileName)) {
								fileName = fileName.replace("'", "");
								exportReportTemplete.returnXSSFWorkbookM(response, fileName, repHead, repData);
							} else {
								maplist.put("code", "1");
								maplist.put("msg", "查询成功");
								if (typechart != null && "1".equals(typechart)) {
									maplist.put("data", getPronJson(repData, instance.getpr()));
								} else {
									maplist.put("data", repData);
								}

								if (!"1".equals(maplist.get("code"))) {
									maplist.put("code", 2);
									maplist.put("msg", "查询失败");
									maplist.put("data", null);
								}
								String jsonstr = json.toJson(maplist);
								out.print(jsonstr);
							}
						}
					} else {
						out.print(json.toJson(result));
					}
				} catch (Exception e) {
					e.printStackTrace();
				} finally {
				}
			}
		}
	}

	/**
	 * 进行对空值率的数据做出统计
	 * 
	 * @param reportEN
	 * @param request
	 * @param response
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@ResponseBody
	@RequestMapping(method = RequestMethod.GET, value = "/getReportNullRate", produces = "text/html;charset=UTF-8", params = "fieldNameEN")
	public void getRportByAddressMapping(HttpServletRequest request, HttpServletResponse response,
			@RequestParam("fieldVal") String fieldVal, @RequestParam("fieldNameEN") String fieldNameEN) {
		// 判断接口是否注册
		String requestUrl = request.getContextPath() + request.getServletPath();
		ResultMessage result = new ResultMessage();
		Gson json = new Gson();
		// 在外嵌的时候进行判断 是否有权限
		if (null != request.getParameter("iframe") && Boolean.parseBoolean(request.getParameter("iframe").toString())
				&& !isIframeCook(request)) {
			PrintWriter out1 = null;
			try {
				out1 = response.getWriter();
			} catch (IOException e) {
				e.printStackTrace();
			}
			Map maplist = new HashMap();
			maplist.put("code", 0);
			maplist.put("msg", "没有通过访问权限");
			String jsonstr = json.toJson(maplist);
			out1.print(jsonstr);
			return;
		}

		MySessionContext context = MySessionContext.getInstance();
		if (context.getInvalidated(request)) {
			PrintWriter out1 = null;
			try {
				out1 = response.getWriter();
			} catch (IOException e) {
				e.printStackTrace();
			}
			Map maplist = new HashMap();
			maplist.put("code", 0);
			maplist.put("msg", "用户登录超时");
			String jsonstr = json.toJson(maplist);
			out1.print(jsonstr);
			return;
		}

		if (null == request.getParameter("iframe") && !checkInterFaceExist(requestUrl, request)) {
			result.setCode("2");
			result.setMsg("存在非法访问，操作已禁止");
			try {
				PrintWriter out = response.getWriter();
				out.print(json.toJson(result));
			} catch (IOException e) {
				e.printStackTrace();
			}
		} else {
			// 获取稽核报表基本信息
			Map<String, String> requestUrlmap = new HashMap<String, String>();// 用于存在全部的接口
			FiledProcFilter instance = FiledProcFilter.getInstance();
			instance.setAllpv(false);
			String[] nameStr = null;// fileName 的List
			String[] fvalStr = null;// fileVal 的List
			List<String> filedNames = null;// 存储字段
			String fileName = null;
			if (null != fieldNameEN && null != fieldVal) {
				nameStr = fieldNameEN.replaceAll("'", "").split(",");
				fvalStr = fieldVal.replaceAll("'", "").split(",");
			}
			// 判断该key下的值该角色是否有权限
			for (int i = 0; i < nameStr.length; i++) {
				if ("prov_id".equals(nameStr[i]) && "pvct".equals(fvalStr[i])) {// 当传的全部的时候为空编码

				} else {
					requestUrlmap.put(nameStr[i], fvalStr[i]);
				}
				if ("kpi_id".equals(nameStr[i]))
					instance.setKpi_id(fvalStr[i]);
				if (instance.getBl().contains(nameStr[i])) {// 在白名单之中
					continue;
				} else {
					String keyValue = fvalStr[i];
					if (null != keyValue && !checkJurExist(keyValue, request)) {
						result.setCode("2");
						result.setMsg("字段非法访问，操作已禁止");
						break;
					}
				}
			}
			instance.setRequestUrlmap(requestUrlmap);
			List<Map<String, String>> pv = resSer.getProvCodeName();
			List<Map<String, String>> ct = resSer.getCityCodeName();
			instance.setPv(pv);
			instance.setCt(ct);

			if (!"2".equals(result.getCode())) {
				Map<String, String> map = null;
				String cb = request.getParameter("audit");
				if (cb != null) {
					response.setContentType("text/javascript");
				} else {
					response.setContentType("application/x-json");
				}

				PrintWriter out = null;
				try {
					out = response.getWriter();
					// 如果该需求为特定需求 那么typechart =1 typechart：1 分省 2全国 3其他
					String typechart = request.getParameter("typechart");
					if (typechart != null && "1".equals(typechart)) {// 这个是进行留下的接口
					}
					try {
						List<String> urlFiledMapping = resSer.getUrlFiledMapping(requestUrlmap);
						instance.setFiledName(urlFiledMapping);
						filedNames = resSer.getUrlFileds(requestUrlmap);
						System.out.println(filedNames);
						instance.setFiledNames(filedNames);

						List<Map<String, String>> reportDataBySql = resSer
								.getReportDataBySql(instance.getNUllALLPVSQL());
						if (reportDataBySql.size() == 1) {
							List<String> c = new ArrayList<String>();
							c.add("all");
							c.add("allpv");
							if (c.contains(reportDataBySql.get(0).get(instance.getpr()))) {
								instance.setAllpv(true);
								System.out.println("这个查询只有全国的数据! ");
							}
						}
						if (filedNames.size() == 0) {
							result.setCode("2");
							result.setMsg("数据为空,请选择其它日期! ");
						}
					} catch (Exception e) {
						result.setCode("2");
						result.setMsg("查询字段的sql出现异常,请处理 !");
						e.printStackTrace();
					}

					if (!"2".equals(result.getCode())) {
						List<Map<String, String>> repData = null;
						String sql = instance.getNullsql();
						System.out.println(sql);
						repData = resSer.getReportDataBySql(instance.getCountSql(sql));
						String rows = (repData.get(0).get("rows") + "");
						repData = new ArrayList<Map<String, String>>();
						String pageNo = request.getParameter("pageNo");
						String pageSize = request.getParameter("pageSize");
						String order = request.getParameter("order");
						if (null != order && !"".equals(order) && !"null".equals(order)) {
							sql = "select a.* from (" + sql + ") a where 1 = 1 " + order;
						}
						if (pageNo != null && !"".equals(pageNo) && !"null".equals(pageNo) && pageSize != null
								&& !"".equals(pageSize) && !"null".equals(pageSize)) {
							repData = resSer.getReportDataBySql(instance.getPageSql(sql, pageNo, pageSize));
						} else {
							repData = resSer.getReportDataBySql(sql);
						}
						// 获取报表表头信息
						List<Map<String, String>> repHead = instance.getNUllTableHead();
						if ("9".equals(typechart)) {// 进行查询head
							Map maplist = new HashMap();
							maplist.put("code", "1");
							maplist.put("rows", rows);
							maplist.put("onlyAll", instance.getAllpv());
							maplist.put("msg", "查询成功");
							maplist.put("Head", repHead);
							String jsonstr = json.toJson(maplist);
							out.print(jsonstr);

						} else {
							fileName = request.getParameter("fileName") + "";
							Map maplist = new HashMap();
							if (null != fileName && !"".equals(fileName) && !"null".equals(fileName)) {
								fileName = fileName.replace("'", "");
								map = new HashMap<String, String>();
								exportReportTemplete.returnXSSFWorkbookM(response, fileName, repHead, repData);
							} else {
								maplist.put("code", "1");
								maplist.put("msg", "查询成功");
								maplist.put("rows", rows);
								maplist.put("Head", repHead);
								maplist.put("onlyAll", instance.getAllpv());
								if (typechart != null && "1".equals(typechart)) {
									maplist.put("data", getPronJson(repData, instance.getpr()));
								} else {
									maplist.put("data", repData);
								}

								if (!"1".equals(maplist.get("code"))) {
									maplist.put("code", 2);
									maplist.put("msg", "查询失败");
									maplist.put("data", null);
								}
								String jsonstr = json.toJson(maplist);
								out.print(jsonstr);
							}
						}
					} else {
						out.print(json.toJson(result));
					}
				} catch (Exception e) {
					e.printStackTrace();
				} finally {
				}
			}
		}
	}

	/**
	 * 进行源表维护
	 * 
	 * @param request
	 * @param response
	 */
	@ResponseBody
	@RequestMapping(method = RequestMethod.GET, value = "/maintainDS", produces = "text/html;charset=UTF-8")
	public void maintainDS(HttpServletRequest request, HttpServletResponse response) {
		String table_name = null;
		table_name = request.getParameter("tableName");
		resSer.maintainDS(table_name);
	}

	// mETHOD 方法 名称
	public void setMETHOD(HttpServletRequest request, String mETHOD) {
		try {
			AdminSession sessionuser = getUserSessionUtil.getUserSession(request);
			LogFilter logf = new LogFilter();
			try {
				String jsessionid = sessionuser == null ? null : sessionuser.getJsSessionId();
				if (jsessionid != null) {
					MySessionContext myc = MySessionContext.getInstance();
					HttpSession sess = myc.getSession(jsessionid);
					String mODULE = loginService.getModuleCode(mETHOD);

					logf.setMODULE(mODULE);// 记录模块
					logf.setMETHOD(mETHOD);// 记录方法

					System.out.println("log 查看存储之前: " + logf.toString());
					sess.setAttribute("LogFilter", logf);
				}
			} catch (Exception e) {
				sessionuser = null;
				System.out.println("用户已经被注销!");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// 下载方法名称
	public void setDOWNMETHOD(HttpServletRequest request, String dOWNMETHOD) {
		try {
			AdminSession sessionuser = getUserSessionUtil.getUserSession(request);
			LogFilter logf;
			try {
				String jsessionid = sessionuser == null ? null : sessionuser.getJsSessionId();

				if (jsessionid != null) {
					MySessionContext myc = MySessionContext.getInstance();
					HttpSession sess = myc.getSession(jsessionid);

					logf = ((LogFilter) sess.getAttribute("LogFilter"));
					logf.setMETHOD(null);// 如果是进行下载则查询的method不进行记录
					logf.setDOWNMETHOD(dOWNMETHOD);

					System.out.println("log 下载存储之前: " + logf.toString());
					sess.setAttribute("LogFilter", logf);
				}
			} catch (Exception e) {
				sessionuser = null;
				System.out.println("用户已经被注销!");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void upLogMethod(HttpServletRequest request) {
		LogFilter logf;
		try {
			AdminSession sessionuser = getUserSessionUtil.getUserSession(request);
			HashMap<String, String> logMessing = new HashMap<String, String>();
			try {
				String jsessionid = sessionuser == null ? null : sessionuser.getJsSessionId();

				MySessionContext myc = MySessionContext.getInstance();
				HttpSession sess = myc.getSession(jsessionid);

				logf = ((LogFilter) sess.getAttribute("LogFilter"));

				logMessing.put("log_JSESSIONID", jsessionid);

				if (null != logf.getMETHOD() && !"".equals(logf.getMETHOD())) {
					logMessing.put("log_method", logf.getMETHOD());
				}
				if (null != logf.getDOWNMETHOD() && !"".equals(logf.getDOWNMETHOD())) {
					logMessing.put("log_downmethod", logf.getDOWNMETHOD());
				}
				if (null != logf.getMODULE() && !"".equals(logf.getMODULE())) {
					logMessing.put("log_module", logf.getMODULE());
				}
			} catch (Exception e) {
				sessionuser = null;
				System.out.println("用户已经被注销!");
			}
			System.out.println("======写入日志内容 " + logMessing.toString());
			loginService.upLogMethod(logMessing);
			System.out.println("======写入结束 " + logMessing.toString());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private Map<String, List<Map<String, String>>> getPronJson(List<Map<String, String>> data, String filedName) {
		if (data != null && data.size() > 0) {
			if (filedName == null)
				filedName = "pro_nm";
			List<Map<String, String>> retList = new ArrayList<Map<String, String>>();
			Map<String, List<Map<String, String>>> mapstr = new LinkedHashMap<String, List<Map<String, String>>>();
			String pro_name = "";
			int cont = 1;
			for (Map<String, String> map : data) {
				if (!pro_name.equals(map.get(filedName) + "") && !"".equals(pro_name)) {
					mapstr.put(pro_name, retList);
					retList = new ArrayList<Map<String, String>>();
				}
				pro_name = map.get(filedName) + "";
				retList.add(map);
				if (data.size() == cont) {
					mapstr.put(pro_name, retList);
				}
				cont++;
			}
			return mapstr;
		}
		return null;
	}

	/**
	 * 通过key值判断是否存在非法权限
	 * 
	 */

	protected Boolean checkJurExist(String key, HttpServletRequest request) {// true 存在，false 不存在，非法
		try {
			if (null != request.getParameter("iframe")
					&& Boolean.parseBoolean(request.getParameter("iframe").toString()))
				return true;
			AdminSession sessionuser = getUserSessionUtil.getUserSession(request);// 通过session取值
			String roleId = sessionuser.getRole();
			Boolean result = resSer.checkJurExist(roleId, key);
			return result;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * 通过key值判断是否存在非法权限
	 * 
	 */
	protected Boolean checkInterFaceExist(String url, HttpServletRequest request) {// true 存在，false 不存在，非法
		try {
			if (null != request.getParameter("iframe")
					&& Boolean.parseBoolean(request.getParameter("iframe").toString()))
				return true;
			AdminSession sessionuser = getUserSessionUtil.getUserSession(request);// 通过session取值
			String roleId = sessionuser.getRole();
			Boolean result = resSer.checkInterFaceExist(roleId, url);
			return result;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * @DESC 进行是否是外嵌进行判断
	 * @param request
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public Boolean isIframeCook(HttpServletRequest request) {
		String menuId = request.getParameter("menuId");
		String roleId = request.getParameter("roleId");
		String JSESSIONID = request.getParameter("JSESSIONID");
		try {
			if (menuId.equals("") || roleId.equals("") || JSESSIONID.equals(""))
				return false;

			String url = getProperties("config.properties", "iframeEmbedUrl");
			String param = "menuId=" + menuId + "&roleId=" + roleId + "&JSESSIONID=" + JSESSIONID;
			System.out.println("进入验证!");
			String r = null;
			try {
				r = HttpRequest.sendGet(url, param);
// 			 r = "{\"hasRight\":\"1\"}";
			} catch (Exception e) {
				e.printStackTrace();
				return false;
			}
			System.out.println("进行外部接口验证权限 \t" + r);
			Gson gson = new Gson();
			Map<String, String> map = new HashMap<String, String>();
			map = gson.fromJson(r, map.getClass());
			if (null != map && "1".equals(map.get("hasRight"))) {
				return true;
			}
			;
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println();
		return false;
	}

//获取 Properties
	public static String getProperties(String filePath, String keyWord) {
		Properties prop = null;
		String value = null;
		try {
			prop = PropertiesLoaderUtils.loadAllProperties(filePath);
			value = prop.getProperty(keyWord);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return value;
	}

}