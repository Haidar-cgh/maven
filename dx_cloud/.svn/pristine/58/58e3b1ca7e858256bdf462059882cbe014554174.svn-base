package com.dw.dao.impl;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.dw.common.base.TempJdbcDao;
import com.dw.dao.IReportDao;
@Repository
public class ReportDaoImpl extends TempJdbcDao implements IReportDao {

	public List getReportTableHeadList(Map<String,String> map) {
		StringBuffer sql = new StringBuffer("select field_name_EN,field_name_CN from z_report_table_head_info where 1=1 ");
		if(map != null){
			if(map.get("report_ID") != null && !"".equals(map.get("report_ID")+"")){
				sql.append("and report_ID="+map.get("report_ID")+"");
			}
		}
		return  querylist(sql.toString());
	}

	public Map<String, String> getReportRunSql(Map<String,String> map) {
		StringBuffer sql = new StringBuffer("select * from z_report_table_data_sql where 1=1 ");
		if(map != null){
			if(map.get("report_Name_EN") != null && !"".equals(map.get("report_Name_EN")+"")){
				sql.append("and report_Name_EN='"+map.get("report_Name_EN")+"'");
			}
		}
		List<Map<String,String>> qlist = querylist(sql.toString());
		
		System.out.println("sql测试："+sql);
		
		if (qlist !=null && qlist.size()>0) {
			return qlist.get(0);
		}
		return  null;
	}

    public Map getUrlReportMapping(Map requestUrlmap){
     	String requestUrlMapping = requestUrlmap.get("requestUrlMapping")+"";
    	String requestType1 = requestUrlmap.get("requestType1")+"";
    	String requestType2 = requestUrlmap.get("requestType2")+"";
     	StringBuilder sb = new StringBuilder();
    	sb.append("SELECT table_url FROM url_report_mapping t WHERE t.request_url = '"+requestUrlMapping+"' AND t.request_type1 = '"+requestType1+"' AND t.request_type2 = '"+requestType2+"'");
     	List<Map> result =  querylist(sb.toString());
    	if(result.size() > 0){
    		return result.get(0);
    	}
     	return null;
     }
	
	
	
	public List<Map<String, String>> getReportFeldsQuery(Map<String,String> map) {
		StringBuffer sql = new StringBuffer("select * from z_report_table_field_query where 1=1 ");
		if (map != null) {
			if(map.get("report_ID") != null && !"".equals(map.get("report_ID")+"")){
				sql.append(" and report_ID="+map.get("report_ID")+"");
			}
			if(map.get("report_Name_EN") != null && !"".equals(map.get("report_Name_EN")+"")){
				sql.append(" and report_Name_EN='"+map.get("report_Name_EN")+"'");
			}
			if(map.get("field_Name_EN") != null && !"".equals(map.get("field_Name_EN")+"")){
				sql.append(" and field_Name_EN='"+map.get("field_Name_EN")+"'");
			}
		}
		return  querylist(sql.toString());
	}
	public List<Map<String,String>> getReportDataBySql(String sql){
		
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
    	String dt =  sdf.format(new Date());
    	
 		int allbreaknum = 0;
		int allbreaktime = 0;
  		if(sql.contains("wenJianTongJi")){
 			List<Map<String,String>> resultfile = querylist(sql);//总文件个数和大小
  			for(Map p :resultfile){
				String provstr = p.get("prov_id").toString();
 				if(!provstr.equals("all")){
					String datasql="SELECT  dt,time_span FROM nsd_count_file_num_size n WHERE data_type = 'ac' AND dt = '"+dt+"' AND n.file_num > '0' AND n.prov_id = '"
							+provstr+"' ORDER BY time_span";
					List<Map> timespans =  querylist(datasql);
					if(timespans.size() == 0){
 						StringBuilder sb = new StringBuilder();
						sb.append("SELECT dt, MAX(time_span) time_span FROM nsd_count_file_num_size n WHERE data_type = 'ac' AND dt = '"+dt+"'  AND n.file_num = '0'  AND n.prov_id = '"+provstr+"' ");
						timespans =  querylist(sb.toString());
						Map zerop = new HashMap();
						zerop.put("dt",dt);
						zerop.put("time_span","00:00");
 						timespans.add(0, zerop);
 					} 
 					Map numtimes = getTimeSpanMinute(timespans);
					p.put("breaknum",numtimes.get("breaknum"));
					p.put("breaktime",numtimes.get("breaktime"));
	 				allbreaknum+=Integer.parseInt(numtimes.get("breaknum")+"");
					allbreaktime+=Integer.parseInt(numtimes.get("breaktime")+"");
					 
    			} 
 			}
   			resultfile.get(0).put("breaknum", allbreaknum+"");
  			resultfile.get(0).put("breaktime", allbreaktime+"");
  			return resultfile;
		}else{
			return querylist(sql);
 		}
 	}

	@Override
	public Boolean checkJurExist(String roleId, String key) {
 		StringBuilder sb = new StringBuilder();
 		
 		if(roleId.equals("1501793717970")){
 			return true;
 		}else{
  			sb.append("SELECT t2.jur_key FROM ums_role_jur t,ums_jur t2 WHERE t.jur_id = t2.jur_id  AND t2.jur_key = '");
 			sb.append(key).append("' AND t.role_id = '").append(roleId).append("'");
 			List<Map> result = querylist(sb.toString());
 			if(result.size() > 0){
 				return true;
 			}else{
 				return false;
 			}
 		}
  	}
	
	public Boolean checkInterFaceExist(String roleId,String url){
		StringBuilder sb = new StringBuilder();
		
		if(roleId.equals("1501793717970")){
			return true;
		}else{
			sb.append("SELECT t1.id  FROM  ums_role_menu t1,  ums_interface t2  WHERE t1.role_id = '");
			sb.append(roleId).append("'  AND t1.menu_id = t2.menu_id   AND t2.interface_address LIKE '%");
			sb.append(url);
			sb.append("%' UNION ALL SELECT id FROM ums_white_list WHERE url LIKE '%");
			sb.append(url).append("%'");
			List<Map> result = querylist(sb.toString());
	 		if(result.size() > 0){
				return true;
			}else{
				return false;
			}
		}
		
		
	 }
    public List reportCrmUserCount(String sql){
     	List<Map> result = querylist(sql);
     	return result;
    }
    /***
     * crm_user_count的head
     */
    @SuppressWarnings("unchecked")
	public List reportCrmUserCountHead(String sql){
    	List<Map> result = querylist(sql);
     	return result;
     }
    
    // 统计分钟时间间隔
     @SuppressWarnings({ "unused", "rawtypes", "unchecked" })
	public Map getTimeSpanMinute(List<Map> timespans){
    	
    	SimpleDateFormat simpleFormat = new SimpleDateFormat("yyyyMMdd HH:mm");
     	String today = timespans.get(0).get("dt")+" ";
   		Date d1 ;
 		Date d2 ;
 		String str1 = null;
 		String str2 = null;
 		int breaknum = 0;
 		int breaktime = 0;
 		int flag=0;
 		try {
 			for(int i=0;i<timespans.size()-1;i++){
 			   String min=timespans.get(0).get("time_span")+"";
 			   if(!"00:00".equals(min) && flag == 0 ){
				   str1 = today+"00:00";
				   str2 = today+timespans.get(i).get("time_span")+"";
				   i--;
				   flag++;
 			   }else{
 				  str1 = today+timespans.get(i).get("time_span")+"";
 				  str2 = today+timespans.get(i+1).get("time_span")+"";
 			   }
 			   d1 = simpleFormat.parse(str1);
 			   d2 = simpleFormat.parse(str2);
 	 		   long from = d1.getTime();
 			   long to = d2.getTime();
 			   int minutes = (int) ((to - from)/(60000)) ; // 转为分钟
 			   if(!"00:00".equals(min) && minutes == 10 && i == -1) {//只有第一次运行的时候 并且 两个时间 等于10 分的时候 可以 
 				  breaknum++;
 			   }
 			   if(minutes > 10 || (!"00:00".equals(min) && flag == 0 ) ){
				   breaknum++;
				   breaktime+=minutes-10;
  			   }
			}
 		} catch (Exception e) {
			e.printStackTrace();
		}
 		Map resultp = new HashMap();
		resultp.put("breaknum",breaknum);
		resultp.put("breaktime",breaktime);
      	return resultp;
    }
    
    // 导出断传的分省的次数、时长
     @SuppressWarnings({ "rawtypes", "unchecked" })
	public  List<Map>  exportProvBreakNumAndTime(Map  map){
     	String provIdSql="SELECT DISTINCT prov_id FROM nsd_count_file_num_size t ";
    	String startTime = map.get("startTime")+"";
    	String endTime = map.get("endTime")+"";
    	List<Map<String,String>> provIds = querylist(provIdSql);
    	List<Map> result = new ArrayList();
    	for(Map  prov : provIds){
     		String provId = prov.get("prov_id")+"";
     		String dataSql=" SELECT  n.prov_id,n.prov_name,n.dt,n.time_span FROM nsd_count_file_num_size n WHERE data_type = 'ac' AND prov_id ='"+provId+"' AND  dt >= '"+startTime+"' AND dt <='"+endTime+"'  AND n.file_num > '0'   ORDER BY dt ASC,time_span ASC ";
      		List<Map> OneProvDate = querylist(dataSql);
      		List<Map> oneProvresultList = getTimeBreakTime(OneProvDate);
      		result.addAll(oneProvresultList);
    	}
     	return result;
    }
    
     
     //返回断传时间段 10 分钟
     @SuppressWarnings({  "rawtypes", "unchecked" })
	public List<Map> getTimeBreakTime(List<Map> timespans){
     	SimpleDateFormat simpleFormat = new SimpleDateFormat("yyyyMMdd HH:mm");
    	Date d1 ;
 		Date d2 ;
 		String str1 = null;
 		String str2 = null;
  		int flag=0;
  		String prov_id = timespans.get(0).get("prov_id")+"";
  		String prov_name = timespans.get(0).get("prov_name")+"";
	    List<Map> result = new ArrayList<Map>();
   		try {
  			for(int i=0;i<timespans.size()-1;i++){
 				Map thistimeBreakp = new HashMap();
 				int breaktime = 0;
 			   String min=timespans.get(0).get("time_span")+"";
 			   
 			   String data1 = timespans.get(i).get("dt")+"";
 			   String data2 = timespans.get(i+1).get("dt")+"";

 			   if(!"00:00".equals(min) && flag == 0 ){
				   str1 = data1+" "+"00:00";
				   str2 = data1+" "+timespans.get(i).get("time_span")+"";
				   i--;
				   flag++;
 			   }else{
 				  str1 = data1+" "+timespans.get(i).get("time_span")+"";
 				  str2 = data2+" "+timespans.get(i+1).get("time_span")+"";
 			   }
 			   d1 = simpleFormat.parse(str1);
 			   d2 = simpleFormat.parse(str2);
 	 		   long from = d1.getTime();
 			   long to = d2.getTime();
 			   int minutes = (int) ((to - from)/(60000)) ; // 转为分钟
 			   if(minutes > 10 || (!"00:00".equals(min) && flag == 0 ) ){
 				  thistimeBreakp.put("prov_id",prov_id);
 				  thistimeBreakp.put("prov_name",prov_name);
  				  breaktime = minutes-10;
 				  thistimeBreakp.put("breakTimeLength",breaktime);
 				  long startimelong = from + 600000;//加上10分钟
  				  Date startDate = new Date(startimelong);
 				  String startTime = simpleFormat.format(startDate);
 				  
 				  thistimeBreakp.put("breakStartTime",getFormatDate(startTime).substring(11, 16));
   				  thistimeBreakp.put("breakEndTime",getFormatDate(str2).substring(11, 16));
   				  thistimeBreakp.put("breakDate",getFormatDate(str2).substring(0, 10));

   				  if(!data1.equals(data2)){
   					  String time1 = str1;
   					  String time2 = data1+" "+"24:00";
   					  String time3 = str2;
   					  long minute1 = simpleFormat.parse(time1).getTime();
   					  long minute2 = simpleFormat.parse(time2).getTime();
   					  long minute3 = simpleFormat.parse(time3).getTime();
   	 			      int minutefirst = (int) ((minute2 - minute1)/(60000)) ; // 转为分钟
   	 			      int minutesecond = (int) ((minute3 - minute2)/(60000)) ; // 转为分钟

   	 			      if(minutefirst > 10){
	   	 				thistimeBreakp = new HashMap();
    	 			    thistimeBreakp.put("prov_id",prov_id);
   	 			    	thistimeBreakp.put("prov_name",prov_name);
   	 			    	breaktime = minutefirst-10;
   	 			    	thistimeBreakp.put("breakTimeLength",breaktime);
   	 			    	long minutefirstlong = minute1 + 600000;//加上10分钟
   	 			    	startDate = new Date(minutefirstlong);
   	 			    	startTime = simpleFormat.format(startDate);
   	 			    	thistimeBreakp.put("breakStartTime",getFormatDate(startTime).substring(11, 16));
   	   				  	thistimeBreakp.put("breakEndTime",getFormatDate(time2).substring(11, 16));
     				    thistimeBreakp.put("breakDate",getFormatDate(startTime).substring(0, 10));
    	   				  	
   	   				  	
     	   				result.add(thistimeBreakp);
    	 			   }
   	 			       
	   	 			  if(minutesecond > 10){
	   	 				    
	   	 				    thistimeBreakp = new HashMap();
 	 	 			    	thistimeBreakp.put("prov_id",prov_id);
	 	 			    	thistimeBreakp.put("prov_name",prov_name);
	 	 			    	breaktime = minutesecond-10;
	 	 			    	thistimeBreakp.put("breakTimeLength",breaktime);
	 	 			    	long minutesecondlong = minute2 + 600000;//加上10分钟
	 	 			    	startDate = new Date(minutesecondlong);
	 	 			    	startTime = simpleFormat.format(startDate);
	 	 			    	thistimeBreakp.put("breakStartTime",getFormatDate(startTime).substring(11, 16));
	 	   				  	thistimeBreakp.put("breakEndTime",getFormatDate(time3).substring(11, 16));
	     				    thistimeBreakp.put("breakDate",getFormatDate(startTime).substring(0, 10));
 	   	   				    result.add(thistimeBreakp);
	  	 			   }
   	 			      
     				 }else{
    	   				  result.add(thistimeBreakp);
    		      }
  				  continue;
   			   }
			}
 		} catch (Exception e) {
			e.printStackTrace();
		}
       	return result;
    } 
      // 格式化日期
      public static String getFormatDate (String date){
     	 StringBuffer sb = new StringBuffer(date);
    	 sb.insert(4, "-"); 
    	 sb.insert(7, "-");
     	 return sb.toString();
     }
      /**
       * 按小时的四个值统计
       */
      @SuppressWarnings({ "unchecked", "unchecked", "rawtypes" })
	public List<Map> report_oth_fix_monitor_count(Map p){
      	  StringBuilder sb = new StringBuilder();
      	  String dt = p.get("dt")+"";
     	  String fixType = p.get("fixType").toString();
 		  String []type = fixType.split("_");
     	  if(fixType.endsWith("ALL")){ // 不区分类别 
    		 if(null != type[0]){
    			 sb.append("SELECT  dt,  prov_id, SUM(t.count) count,  ROUND(SUM(t.size), 3) size ");
    			 if("FIX".equals(type[0])){
    				 sb.append(",'固网汇总' data_ch,'FIX_ALL' data_en ");
    			 }else{
    				 sb.append(",'移动汇总' data_ch,'OTH_ALL' data_en ");
    			 }
    			 sb.append(" FROM  oth_fix_file_count t  WHERE t.data_en LIKE '"+type[0]+"_%' ")
    			   .append(" AND t.dt = '"+dt+"'  AND t.typ = 'b'  GROUP BY dt,  prov_id ");
    		 }
    	  }else{// 分类别
    		  sb.append("SELECT  dt, prov_id, data_en,t.data_ch, SUM(t.count) count,  ROUND(SUM(t.size),3) size ")
     	  	 	.append("FROM oth_fix_file_count t WHERE t.data_en = '"+fixType+"'  AND t.dt = '"+dt+"' ")
     	  	 	.append("AND t.typ = 'b' GROUP BY dt, prov_id, data_en, data_ch ");
    	  }
     	  List<Map> resultfile = querylist(sb.toString());//总文件个数和大小
    	  String provstr = null;
    	   Long breaknumall=0L;
		   Long breaktimeall=0L;
			for(Map provps :resultfile){
   				    provstr = provps.get("prov_id").toString();
     				if(fixType.endsWith("ALL")){ // 不区分类型
 					Long breaknum4 = 0L;
					Long breaktime4 = 0L;
  					if("FIX".equals(type[0])){
						String []fixtype = {"FIX_CDR","FIX_DDR","FIX_MDR","FIX_VDR"};
						for(int i=0;i<fixtype.length;i++){
			 				StringBuilder datasql = new StringBuilder();
    							datasql.append("SELECT * FROM ( SELECT t.dt,t.prov_id,t.data_en,t.data_ch,t.count,t.size,t.last_hour FROM oth_fix_file_count t WHERE t.dt = '"+dt+"' AND t.prov_id = '");
   							datasql.append(provstr).append("' AND t.data_en = '"+fixtype[i]+"' and count >0 AND t.typ='b')a ORDER BY last_hour");
    						List<Map> timespans =  querylist(datasql.toString());
    						if(timespans.size() == 0 ){
     						}else{
    							Map numtimes = getTimeSpanHour(timespans);
      							breaknum4+=Long.parseLong(numtimes.get("breaknum")+"");
     							breaktime4+=Long.parseLong(numtimes.get("breaktime")+"");
    						}
   						}// for
   					}else if("OTH".equals(type[0])){
   						String []othtype = {"OTH_CDR","OTH_DDR","OTH_MDR","OTH_VDR"};
						for(int i=0;i<othtype.length;i++){
			 				StringBuilder datasql = new StringBuilder();
    							datasql.append("SELECT * FROM ( SELECT t.dt,t.prov_id,t.data_en,t.data_ch,t.count,t.size,t.last_hour FROM oth_fix_file_count t WHERE t.dt = '"+dt+"' AND t.prov_id = '");
   							datasql.append(provstr).append("' AND t.data_en = '"+othtype[i]+"' and count >0  AND t.typ='b')a ORDER BY last_hour");
    						List<Map> timespans =  querylist(datasql.toString());
 			 				if(timespans.size() == 0 ){
     						}else{
    							Map numtimes = getTimeSpanHour(timespans);
      							breaknum4+=Long.parseLong(numtimes.get("breaknum")+"");
     							breaktime4+=Long.parseLong(numtimes.get("breaktime")+"");
    						}
   						}// for
					}// else
 					provps.put("breaknum", breaknum4);
					provps.put("breaktime", breaktime4);
  					breaknumall+=breaknum4;
					breaktimeall+=breaktime4;
 					
				}else{  // 区分类型
					StringBuilder datasql2 = new StringBuilder();
					datasql2.append("SELECT * FROM ( SELECT t.dt,t.prov_id,t.data_en,t.data_ch,t.count,t.size,t.last_hour FROM oth_fix_file_count t WHERE t.dt = '"+dt+"' AND t.prov_id = '")
				       .append(provstr).append("' AND t.data_en = '"+fixType+"' and count >0 AND t.typ='b')a ORDER BY last_hour");
					List<Map> timespans =  querylist(datasql2.toString());
	 				Map numtimes = getTimeSpanHour(timespans);
	 				provps.put("breaknum",numtimes.get("breaknum"));
	 				provps.put("breaktime",numtimes.get("breaktime"));
	 				breaknumall+=Long.parseLong(numtimes.get("breaknum")+"");
					breaktimeall+=Long.parseLong(numtimes.get("breaktime")+"");
				}// else 
  			}
			
			for(int j = resultfile.size()-1;j >=0 ;j -- ){
				String provId = resultfile.get(j).get("prov_id")+"";
				 if("all".equals(provId)){
					 resultfile.get(j).put("breaknum", breaknumall);
					 resultfile.get(j).put("breaktime", breaktimeall);
					 break;
 				 }
			}
       	 return resultfile;
      }
      
	// 按小时统计
	public static Map getTimeSpanHour(List<Map> hourspans) {
		
		SimpleDateFormat simpleFormat = new SimpleDateFormat("yyyyMMdd HH");
		String today = hourspans.get(0).get("dt") + " ";
		Date d1;
		Date d2;
		String str1 = null;
		String str2 = null;
		int breaknum = 0;
		int breaktime = 0;
		int flag = 0;
		try {
			for (int i = 0; i < hourspans.size() - 1; i++) {
				String min = hourspans.get(0).get("last_hour") + "";
				if (!"00".equals(min) && flag == 0) {
					str1 = today + "00";
					str2 = today + hourspans.get(i).get("last_hour") + "";
					i--;
					flag++;
				} else {
					str1 = today + hourspans.get(i).get("last_hour") + "";
					str2 = today + hourspans.get(i + 1).get("last_hour") + "";
				}
				d1 = simpleFormat.parse(str1);
				d2 = simpleFormat.parse(str2);
				long from = d1.getTime();
				long to = d2.getTime();
				int hour = (int) ((to - from) / (3600000)); // 转为小时
				if (hour > 1 || (!"00".equals(min) && flag == 0)) {
					breaknum++;
					breaktime += hour - 1;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		Map resultp = new HashMap();
		resultp.put("breaknum", breaknum);
		resultp.put("breaktime", breaktime);
		return resultp;
	}
	
	 /**
     * 导出
     */
    @SuppressWarnings({ "rawtypes", "unchecked" })
	public List<Map> export_report_oth_fix_monitor_count(Map map){
   	    
    	String provIdSql="SELECT DISTINCT prov_id FROM oth_fix_file_count t  ";
    	String startTime = map.get("startTime")+"";
    	String endTime = map.get("endTime")+"";
    	String dataType = map.get("dataType")+"";

    	List<Map<String,String>> provIds = querylist(provIdSql);
    	List<Map> result = new ArrayList();
    	for(Map  prov : provIds){
     		String provId = prov.get("prov_id")+"";
       		if(dataType.endsWith("ALL")){
     			String []types = dataType.split("_");
     			String []othfixtype = new String[4];
     			if(null != types[0]){
     				if("FIX".equals(types[0])){
						  othfixtype = new String[]{"FIX_CDR","FIX_DDR","FIX_MDR","FIX_VDR"};
     				}else{
   						  othfixtype = new String[]{"OTH_CDR","OTH_DDR","OTH_MDR","OTH_VDR"};
      				}
     				for(int i=0;i<othfixtype.length;i++){
     	     			String dataSql=" SELECT  t.dt, t.prov_id,t2.prov_name, t.data_en, t.data_ch, t.last_hour FROM oth_fix_file_count t  LEFT JOIN prov_code t2 ON t.prov_id = t2.oth_prov_id   WHERE t.dt >=  '"+startTime+"'  AND t.dt <= '"+endTime+"' AND t.prov_id = '"+provId+"'  AND t.data_en = '"+othfixtype[i]+"' and  t.count > 0  AND t.typ = 'b' ORDER BY dt ASC,last_hour ASC";
     	     			List<Map> OneProvDate = querylist(dataSql);
     	     			if(OneProvDate.size() != 0){
     	          			List<Map> oneProvresultList = getTimeBreakHourTime(OneProvDate);
     	              		result.addAll(oneProvresultList);
     	          		}
      				}
      			}
     		}else{
     			String dataSql=" SELECT  t.dt, t.prov_id,t2.prov_name, t.data_en, t.data_ch, t.last_hour FROM oth_fix_file_count t  LEFT JOIN prov_code t2 ON t.prov_id = t2.oth_prov_id   WHERE t.dt >=  '"+startTime+"'  AND t.dt <= '"+endTime+"' AND t.prov_id = '"+provId+"'  AND t.data_en = '"+dataType+"' and  t.count > 0  AND t.typ = 'b' ORDER BY dt ASC,last_hour ASC";
          		List<Map> OneProvDate = querylist(dataSql);
          		System.out.println("OneProvDate-----"+OneProvDate.size());
          		if(OneProvDate.size() != 0){
          			List<Map> oneProvresultList = getTimeBreakHourTime(OneProvDate);
              		result.addAll(oneProvresultList);
           		}
          		
     		}
     	}
    	System.out.println("---------"+result.size());
     	return result;
    }
 	
  //返回断传时间段小时
    @SuppressWarnings({  "rawtypes", "unchecked" })
	public List<Map> getTimeBreakHourTime(List<Map> timespans){
     	
    	SimpleDateFormat simpleFormat = new SimpleDateFormat("yyyyMMdd HH");
  		Date d1 ;
		Date d2 ;
		String str1 = null;
		String str2 = null;
 		int flag=0;
 		String prov_id = timespans.get(0).get("prov_id")+"";
 		String data_en = timespans.get(0).get("data_en")+"";
 		String data_ch = timespans.get(0).get("data_ch")+"";
 		String prov_name = timespans.get(0).get("prov_name")+"";
  		if("all".equals(prov_id)){
 			prov_name="全国";
 		}
  	    List<Map> result = new ArrayList<Map>();
  		try {
			String min=timespans.get(0).get("last_hour")+"";
  			for(int i=0;i<timespans.size()-1;i++){
				Map thistimeBreakp = new HashMap();
				int breaktime = 0;
				
				String data1 = timespans.get(i).get("dt")+"";
				String data2 = timespans.get(i+1).get("dt")+"";

 			   if(!"00".equals(min) && flag == 0 ){
				   str1 = data1+" "+"00";
				   str2 = data1+" "+timespans.get(i).get("last_hour")+"";
				   i--;
				   flag++;
			   }else{
				  str1 =  data1+" "+timespans.get(i).get("last_hour")+"";
				  str2 =  data2+" "+timespans.get(i+1).get("last_hour")+"";
			   }
 			   if(i==66){
 				   System.out.println(1);
 			   }
			   d1 = simpleFormat.parse(str1);
			   d2 = simpleFormat.parse(str2);
	 		   long from = d1.getTime();
			   long to = d2.getTime();
			   int hours = (int) ((to - from)/(3600000)) ; // 转为小时
 			   
			   if(hours > 1 || (!"00".equals(min) && flag == 0 ) ){
				  thistimeBreakp.put("prov_id",prov_id);
 				  thistimeBreakp.put("prov_name",prov_name);
				  thistimeBreakp.put("data_en",data_en);
				  thistimeBreakp.put("data_ch",data_ch); 
   				  breaktime = hours-1;
  				  thistimeBreakp.put("breakTimeLength",breaktime);
  				  long starttimelong = from + 3600000;//加1小时
  				  Date startDate = new Date(starttimelong);
				  String startTime = simpleFormat.format(startDate);
 				  thistimeBreakp.put("breakStartTime",getFormatDate(startTime).substring(11, 13)+":00");
  				  thistimeBreakp.put("breakEndTime",getFormatDate(str2).substring(11, 13)+":00");
  				  thistimeBreakp.put("breakDate",getFormatDate(str2).substring(0, 10));

  				  if(!data1.equals(data2)){
  					 String time1 = str1;
  					 String time2 = data1+" "+"24";
  					 String time3 = str2;
  					 long minute1 = simpleFormat.parse(time1).getTime();
  					 long minute2 = simpleFormat.parse(time2).getTime();
  					 long minute3 = simpleFormat.parse(time3).getTime();
  	 			     int hoursfirst = (int) ((minute2 - minute1)/(3600000)) ; // 转为小时
  	 			     int hourssecond = (int) ((minute3 - minute2)/(3600000)) ;// 转为小时
  	 			     
  					 if(hoursfirst > 1 ){
  						  thistimeBreakp = new HashMap();
  	  					  thistimeBreakp.put("prov_id",prov_id);
	  	 				  thistimeBreakp.put("prov_name",prov_name);
	  					  thistimeBreakp.put("data_en",data_en);
	  					  thistimeBreakp.put("data_ch",data_ch); 
	  	   				  breaktime = hoursfirst-1;
	  	  				  thistimeBreakp.put("breakTimeLength",breaktime);
	  	  				  long hoursfirstlong = minute1 + 3600000;//加1小时
	  	  				  startDate = new Date(hoursfirstlong);
	  					  startTime = simpleFormat.format(startDate);
	  	 				  thistimeBreakp.put("breakStartTime",getFormatDate(startTime).substring(11, 13)+":00");
	  	  				  thistimeBreakp.put("breakEndTime",getFormatDate(time2).substring(11, 13)+":00");
	     				  thistimeBreakp.put("breakDate",getFormatDate(startTime).substring(0, 10));
	     				  result.add(thistimeBreakp);
   					 }
  					 if(hourssecond > 1 ){
  						  thistimeBreakp = new HashMap();
 	  					  thistimeBreakp.put("prov_id",prov_id);
	  	 				  thistimeBreakp.put("prov_name",prov_name);
	  					  thistimeBreakp.put("data_en",data_en);
	  					  thistimeBreakp.put("data_ch",data_ch); 
	  	   				  breaktime = hourssecond-1;
	  	  				  thistimeBreakp.put("breakTimeLength",breaktime);
	  	  				  long hourssecondlong = minute2 + 3600000;//加1小时
	  	  				  startDate = new Date(hourssecondlong);
	  					  startTime = simpleFormat.format(startDate);
	  	 				  thistimeBreakp.put("breakStartTime",getFormatDate(startTime).substring(11, 13)+":00");
	  	  				  thistimeBreakp.put("breakEndTime",getFormatDate(time3).substring(11, 13)+":00");
	     				  thistimeBreakp.put("breakDate",getFormatDate(startTime).substring(0, 10));
	     				  result.add(thistimeBreakp);
  					 } 
  				  }else{
  	 				  result.add(thistimeBreakp);
   				  }
   			   }
			}
 		} catch (Exception e) {
			e.printStackTrace();
		}
      	return result;
   } 
    
    
    
 }
