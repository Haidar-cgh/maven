package com.dw.util;

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
  
public class exportReportTemplete {

    public static HSSFWorkbook getHSSFWorkbook(String sheetName,List<Map> title,List<Map>  values, HSSFWorkbook wb){

        // 第一步，创建一个HSSFWorkbook，对应一个Excel文件
        if(wb == null){
            wb = new HSSFWorkbook();
        }
        // 第二步，在workbook中添加一个sheet,对应Excel文件中的sheet
        HSSFSheet sheet = wb.createSheet(sheetName);
        // 第三步，在sheet中添加表头第0行,注意老版本poi对Excel的行数列数有限制
        HSSFRow row = sheet.createRow(0);
        // 第四步，创建单元格，并设置值表头 设置表头居中
        HSSFCellStyle style = wb.createCellStyle();
        style.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式

        //声明列对象
        HSSFCell cell = null;
         //创建标题
        for(int i=0;i<title.size();i++){
            cell = row.createCell(i);
            cell.setCellValue(title.get(i).get("field_name_CN")+"");
            cell.setCellStyle(style);
        }

        //创建内容
        for(int i=0;i<values.size();i++){
            row = sheet.createRow(i + 1);
            for(int j=0;j<title.size();j++){
            	String en = title.get(j).get("field_name_EN")+"";
            	String value = String.valueOf(values.get(i).get(en));
            	if(isNum(value)){
                    row.createCell(j).setCellValue(Double.parseDouble(value));
             	}else{
                    row.createCell(j).setCellValue(value);
             	}
             }
         }
        return wb;
    }

    
    public static HSSFWorkbook getHSSFWorkbookWithOtherMap(String sheetName,List<Map<String,String>> title,List<Map<String,String>>  values, HSSFWorkbook wb){

        // 第一步，创建一个HSSFWorkbook，对应一个Excel文件
        if(wb == null){
            wb = new HSSFWorkbook();
        }
        // 第二步，在workbook中添加一个sheet,对应Excel文件中的sheet
        HSSFSheet sheet = wb.createSheet(sheetName);
        // 第三步，在sheet中添加表头第0行,注意老版本poi对Excel的行数列数有限制
        HSSFRow row = sheet.createRow(0);
        // 第四步，创建单元格，并设置值表头 设置表头居中
        HSSFCellStyle style = wb.createCellStyle();
        style.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式

        //声明列对象
        HSSFCell cell = null;
         //创建标题
        for(int i=0;i<title.size();i++){
            cell = row.createCell(i);
            cell.setCellValue(title.get(i).get("field_name_CN")+"");
            cell.setCellStyle(style);
        }
         //创建内容
        for(int i=0;i<values.size();i++){
            row = sheet.createRow(i + 1);
            for(int j=0;j<title.size();j++){
            	String en = title.get(j).get("field_name_EN")+"";
            	String value = String.valueOf(values.get(i).get(en));
            	if(isNum(value)){
                    row.createCell(j).setCellValue(Double.parseDouble(value));
             	}else{
                    row.createCell(j).setCellValue(value);
             	}
             }
         }
        return wb;
    }
    
    
    
	public static void ReturnResponse(HttpServletResponse response,String fileName,HSSFWorkbook wb){
     	//响应到客户端
    	try {
		        response.reset();
 	    		setResponseHeader(response, fileName);
	    		OutputStream os = response.getOutputStream();
	    		wb.write(os);
	    		os.flush();
	    		os.close();
    		} catch (Exception e){
     			e.printStackTrace();
    		}
	}
     
  //发送响应流方法
    public static void setResponseHeader(HttpServletResponse response, String fileName) {
        try {
            try {
                fileName = new String(fileName.getBytes(),"ISO8859-1");
            } catch (Exception e) {
                 e.printStackTrace();
            }
            response.setContentType("application/octet-stream;charset=ISO8859-1");
            response.setHeader("Content-Disposition", "attachment;filename="+ fileName);
            response.addHeader("Pargam", "no-cache");
            response.addHeader("Cache-Control", "no-cache");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }  
    
    //判断是不是数字，小数点
    public static Boolean isNum(String data){
     	String regex = "^[+-]?\\d+(\\.\\d+)?$";
    	if(data.matches(regex)){
    		return true;
    	}else {
    		return false;
    	}
     }
}
	
	
 